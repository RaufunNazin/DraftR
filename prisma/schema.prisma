generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String       @id @default(cuid())
  email                   String       @unique
  name                    String
  password                String
  role                    UserRole     @default(AUDIENCE)
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  captainProfile          Captain?
  hostedTournaments       Tournament[] @relation("TournamentHost")
  participatedTournaments Tournament[] @relation("TournamentParticipants")
}

model Tournament {
  id           String           @id @default(cuid())
  name         String
  code         String           @unique @db.VarChar(4)
  status       TournamentStatus @default(UPCOMING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  startedAt    DateTime?
  endedAt      DateTime?
  hostId       String
  auction      Auction?
  captains     Captain[]
  players      Player[]
  host         User             @relation("TournamentHost", fields: [hostId], references: [id])
  participants User[]           @relation("TournamentParticipants")
}

model Player {
  id               String           @id @default(cuid())
  name             String
  tier             Int              @db.SmallInt
  role             PlayerRole
  startingPrice    Int
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  tournamentId     String
  captainId        String?
  currentInAuction Auction?         @relation("CurrentAuctionPlayer")
  auctionHistory   AuctionHistory[]
  captain          Captain?         @relation(fields: [captainId], references: [id])
  tournament       Tournament       @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  agents           PlayerAgent[]
}

model PlayerAgent {
  id       String @id @default(cuid())
  agent    String
  playerId String
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, agent])
}

model Captain {
  id           String              @id @default(cuid())
  tier         Int                 @db.SmallInt
  role         PlayerRole
  credits      Int
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  userId       String              @unique
  tournamentId String
  bids         AuctionBid[]
  wonAuctions  AuctionHistory[]
  skipVotes    AuctionSkipVote[]
  tournament   Tournament          @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  agents       CaptainAgent[]
  pickedTiers  CaptainPickedTier[]
  players      Player[]
}

model CaptainPickedTier {
  id        String  @id @default(cuid())
  tier      Int     @db.SmallInt
  captainId String
  captain   Captain @relation(fields: [captainId], references: [id], onDelete: Cascade)

  @@unique([captainId, tier])
}

model CaptainAgent {
  id        String  @id @default(cuid())
  agent     String
  captainId String
  captain   Captain @relation(fields: [captainId], references: [id], onDelete: Cascade)

  @@unique([captainId, agent])
}

model Auction {
  id              String            @id @default(cuid())
  isActive        Boolean           @default(false)
  bidMode         BidMode           @default(OPEN)
  timerSeconds    Int               @default(30)
  currentTimer    Int               @default(30)
  isPaused        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  startedAt       DateTime?
  endedAt         DateTime?
  tournamentId    String            @unique
  currentPlayerId String?           @unique
  currentPlayer   Player?           @relation("CurrentAuctionPlayer", fields: [currentPlayerId], references: [id])
  tournament      Tournament        @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  bids            AuctionBid[]
  history         AuctionHistory[]
  skipVotes       AuctionSkipVote[]
}

model AuctionBid {
  id        String   @id @default(cuid())
  amount    Int
  createdAt DateTime @default(now())
  auctionId String
  captainId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  captain   Captain  @relation(fields: [captainId], references: [id])
}

model AuctionSkipVote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  auctionId String
  captainId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  captain   Captain  @relation(fields: [captainId], references: [id])

  @@unique([auctionId, captainId])
}

model AuctionHistory {
  id        String   @id @default(cuid())
  finalBid  Int
  timestamp DateTime @default(now())
  auctionId String
  playerId  String
  captainId String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  captain   Captain  @relation(fields: [captainId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
}

enum UserRole {
  ADMIN
  HOST
  CAPTAIN
  AUDIENCE
}

enum TournamentStatus {
  UPCOMING
  ACTIVE
  COMPLETED
}

enum PlayerRole {
  DUELIST
  INITIATOR
  CONTROLLER
  SENTINEL
}

enum BidMode {
  OPEN
  HIDDEN
  BLIND
  TIMED
}
